//
//  TouristModels.swift
//  PicMapIOS
//
//  Created by wangchaojs02 on 16/2/16.
//  Copyright (c) 2016年 wangchaojs02. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import ObjectMapper
import MapKit

struct Tourist_FetchDetail_Request
{
    let touristID: String
}

struct Tourist_FetchDetail_Response
{
    let detail: [String: AnyObject]
}

/*
 {
 "url":"http://m.tuniucdn.com/fb2/t1/G1/M00/8D/C2/Cii9EFaCqw-IXIS_AAJPSgXoD40AABN4gChs90AAk9i750_w700_h0_c0_t0.jpg",
 "time":1439164800,
 "content":"",
 "location":"黄果树景区",
 "coordinate":{
 "lng":105.67474901702,
 "lat":25.995887241047
 }
 },

 */

class PhotoViewModel: Mappable
{
    var url = ""
    var content = ""
    var time: NSDate!
    var coordinate: CLLocationCoordinate2D = CLLocationCoordinate2D(latitude: 0, longitude: 0)

    class func viewModelFromDictonary(dictonary: [String: AnyObject]) -> PhotoViewModel? {
        return Mapper<PhotoViewModel>().map(dictonary)
    }

    required init?(_ map: Map) {
    }

    func mapping(map: Map) -> () {
        url <- map["url"]
        time = NSDate(timeIntervalSince1970: map["time"].currentValue as! Double)
        coordinate = CLLocationCoordinate2D(coordinate: map["coordinate"].currentValue as? [String: AnyObject])!
    }
}

class LocationComponent {
    var name: String = ""
    var components: [AnyObject] = []
    var mapper: [String: LocationComponent]?

    convenience init(name: String, mapper: [String: LocationComponent]? = nil) {
        self.init()
        self.name = name
        self.mapper = mapper
    }
}

typealias LocationElement = [String: AnyObject]
typealias ProvinceElement = LocationComponent
typealias CountryElement = LocationComponent
typealias WorldElement = [LocationComponent]

class Tourist_FetchDetail_ViewModel: Mappable
{
    var name = ""
    var avatar = ""
    var aid = ""
    var trips : [TripCellViewModel] = []
    var photoList: [[PhotoViewModel]] = []
    var photoDateList: [String] = []

    var days = 0
    var miles = 0.0
    var follow = 0
    var heat = 0
    var fans = 0

    var locationList: WorldElement = []
    var favLocationsList: WorldElement = []

    class func viewModelFromDictonary(dictonary: [String: AnyObject]) -> Tourist_FetchDetail_ViewModel? {
        return Mapper<Tourist_FetchDetail_ViewModel>().map(dictonary)
    }

    required init?(_ map: Map) {
    }
    func mapping(map: Map) -> () {
        name <- map["name"]
        avatar <- map["avatar"]
        aid <- map["aid"]
        trips <- map["trips"]
        miles <- map["distance"]
        heat <- map["heat"]
        days <- map["days"]
        follow <- map["follow-count"]
        fans <- map["fans-count"]

        let formatter = NSDateFormatter()
        formatter.dateFormat = "YYYY年MM月"

        var photoListMapper = [String: [PhotoViewModel]]()
        if let photos = map["photos"].currentValue as? [[String: AnyObject]] {
            for photo in photos {
                let photoViewModel = PhotoViewModel.viewModelFromDictonary(photo)
                let dateText = formatter.stringFromDate((photoViewModel?.time)!)
                if photoListMapper[dateText] == nil {
                    photoListMapper[dateText] = []
                }
                photoListMapper[dateText]?.append(photoViewModel!)
            }
        }
        photoDateList = photoListMapper.keys.sort { (left, right) -> Bool in
            return left.compare(right) == .OrderedDescending
        }

        for photoDate in photoDateList {
            photoList.append(photoListMapper[photoDate]!)
        }

        locationList = mappingLocations(map["locations"].currentValue as! [LocationElement])
        favLocationsList = mappingLocations(map["fav-locations"].currentValue as! [LocationElement])
    }

    func mappingLocations(locations: [LocationElement]) -> WorldElement {
        let world = LocationComponent(name: "")
        world.mapper = [:]
        var countries = world.mapper!

        for location in locations {
            guard var countryName = location ["country"] as? String
            else { continue }
            if countryName == "" {
                countryName = "世界"
            }

            if countries[countryName] == nil {
                countries[countryName] = LocationComponent(name: countryName, mapper: [:])
            }

            let country = countries[countryName]! as LocationComponent
            let provinceName = get2ndAddressComponentName(location)
            if let provinceName = provinceName {
                if country.mapper![provinceName] == nil {
                    country.mapper![provinceName] = LocationComponent(name: provinceName)
                }

                let province = country.mapper![provinceName]
                province?.components.append(location)
            }
        }

        for (_, country) in countries {
            for (_, value) in(country.mapper)! {
                country.components.append(value)
            }
            country.mapper = nil
            world.components.append(country)
        }
        return world.components as! [LocationComponent]
    }

    func get1stAddressComponentName(location: [String: AnyObject]) -> String? {
        var countryName = location ["country"] as! String
        if countryName == "" {
            countryName = "世界"
        }

        return countryName
    }

    func get2ndAddressComponentName(location: [String: AnyObject]) -> String? {
        var provinceName = location["province"] as! String
        if provinceName == "" {
            provinceName = location["city"] as! String

            if provinceName == "" {
                provinceName = location["district"] as! String

                if provinceName == "" {
                    provinceName = location["street"] as! String
                }
            }
        }
        return provinceName
    }

    func getLastAddressComponentName(location: [String: AnyObject]) -> String? {
        var lastName = location["street"] as! String
        if lastName == "" {
            lastName = location["district"] as! String

            if lastName == "" {
                lastName = location["city"] as! String

                if lastName == "" {
                    lastName = location["country"] as! String
                }
            }
        }
        return lastName
    }
}
