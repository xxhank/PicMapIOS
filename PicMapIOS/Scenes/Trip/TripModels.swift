//
//  TripModels.swift
//  PicMapIOS
//
//  Created by wangchaojs02 on 16/2/15.
//  Copyright (c) 2016å¹´ wangchaojs02. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CoreLocation
import MapKit

import ObjectMapper

struct Trip_FetchTripDetail_Request
{
    var tripID: String
}

struct Trip_FetchTripDetail_Response
{
    var tripData: [String: AnyObject]
}

struct Trip_FetchTripDetail_ViewModel
{
    var detail: TripDetailViewModel
}

class TripDetailViewModel: TripViewModel {
    var locations: [TripLocationCellViewModel] = []
    var locationNames: [String] = []
    var annotations: [MKAnnotation] = []
    var region: MKCoordinateRegion?
//
    class func viewModelFromDictonary(dictonary: [String: AnyObject]) -> TripDetailViewModel? {
        return Mapper<TripDetailViewModel>().map(dictonary)
    }

    override func mapping(map: Map) -> () {
        super.mapping(map)
        var locationsMapper : [String: TripLocationCellViewModel] = [:]
        if let photos = map["photos"].currentValue as? [AnyObject] {
            for photo in photos {
                let locationName: String = photo["location"] as! String
                var locationCellViewModel = locationsMapper[locationName]
                if locationCellViewModel == nil {
                    locationCellViewModel = TripLocationCellViewModel()
                    locationsMapper[locationName] = locationCellViewModel
                }
                if let photoURL = photo["url"] as? String {
                    locationCellViewModel?.photos.append(photoURL)
                }
            }
        }

        if let locations = map["locations"].currentValue as? [AnyObject] {
            for (index, location) in locations.enumerate() {
                let locationName: String = location["name"] as! String
                if let locationCellViewModel = locationsMapper[locationName] {
                    locationCellViewModel.index = index
                    locationCellViewModel.city = locationName

                    let coordinate = location["coordinate"] as! [String: AnyObject]
                    let latitude = coordinate["lat"] as! Double
                    let longitude = coordinate["lng"] as! Double

                    locationCellViewModel.coordinate = CLLocationCoordinate2D(latitude: latitude, longitude: longitude)

                    self.locationNames.append(locationName)
                    self.locations.append(locationCellViewModel)
                }
            }
        }

        let latitudes = self.locations.map { (viewModel) -> Double in
            return viewModel.coordinate.latitude
        }
        let longitudes = self.locations.map { (viewModel) -> Double in
            return viewModel.coordinate.longitude
        }

        let maxLat: CLLocationDegrees = latitudes.maxElement()!,
            minLat: CLLocationDegrees = latitudes.minElement()!,
            maxLng: CLLocationDegrees = longitudes.maxElement()!,
            minLng: CLLocationDegrees = longitudes.minElement()!;

        // pad our map by 10% around the farthest annotations
        let MAP_PADDING = 1.1
        let center = CLLocationCoordinate2D(latitude: (maxLat + minLat) / 2, longitude: (minLng + maxLng) / 2)
        let span = MKCoordinateSpan(latitudeDelta: (maxLat - minLat) * MAP_PADDING, longitudeDelta: (maxLng - minLng) * MAP_PADDING)
        region = MKCoordinateRegion(center: center, span: span)
        annotations = self.locations.map({ (viewModel) -> LocationAnnotation in
            return LocationAnnotation(viewModel: viewModel)
        })
    }
}

class TripLocationCellViewModel
{
    var index: Int = 0
    var city: String = ""
    var location: String = ""
    var street: String = ""
    var distance: String = "18.6 km"
    var heat = 0
    var photos: [String] = []
    var coordinate: CLLocationCoordinate2D = CLLocationCoordinate2D(latitude: 0, longitude: 0)
}
