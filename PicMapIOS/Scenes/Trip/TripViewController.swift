//
//  TripViewController.swift
//  PicMapIOS
//
//  Created by wangchaojs02 on 16/2/15.
//  Copyright (c) 2016å¹´ wangchaojs02. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import MapKit
import TagListView
import XCGLogger
import PKHUD

protocol TripViewControllerInput: class
{
    func displayTripDetail(viewModel: ViewModel<Trip_FetchTripDetail_ViewModel>)
}

protocol TripViewControllerOutput
{
    func fetchTripDetail(request: Trip_FetchTripDetail_Request)
}

class TripHeadView: UIView {
    @IBOutlet weak var nameView: UILabel!
    @IBOutlet weak var avatarView: UIImageView!

    @IBOutlet weak var photoView: UIImageView!
    @IBOutlet weak var tripTitleView: UILabel!
    @IBOutlet weak var locationsView: TagListView!

    var viewModel: TripDetailViewModel? {
        didSet {
            if let viewModel = viewModel as TripDetailViewModel! {
                nameView.text = viewModel.author
                if let url = NSURL(string: viewModel.avatar) {
                    avatarView.hnk_setImageFromURL(url, placeholder: UIImage(named: "avatar"), format: nil, failure: nil, success: nil)
                }

                if let url = NSURL(string: viewModel.photo) {
                    photoView.hnk_setImageFromURL(url, placeholder: UIImage(named: "landscape"), format: nil, failure: nil, success: nil)
                }

                tripTitleView.text = viewModel.title

                locationsView.removeAllTags()
                viewModel.locationNames.forEach({ (location) -> () in
                    locationsView.addTag(location)
                })
            }
        }
    }
}

class TripViewController: UIViewController, TripViewControllerInput
{
    // MARK: - Clean Swift
    var output: TripViewControllerOutput!
    var router: TripRouter!

    // MARK: - Outlet
    @IBOutlet weak var headView: TripHeadView!

    @IBOutlet weak var locationListView: UITableView!
    var proxy: MMArrayTableViewProxy?

    @IBOutlet weak var mapView: MKMapView!

    var tripID: String = ""

    // MARK: - Object lifecycle
    override func awakeFromNib()
    {
        super.awakeFromNib()
        TripConfigurator.sharedInstance.configure(self)
    }

    // MARK: - View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()

        setupMapView()
        setupLocationListView()

        fetchTripDetailOnLoad()
    }

    // MARK: - IBAction
    @IBAction func popViewController() {
        self.navigationController?.popViewControllerAnimated(true)
    }

    // MARK: - Event handling
    func fetchTripDetailOnLoad()
    {
        let request = Trip_FetchTripDetail_Request(tripID: tripID)
        output.fetchTripDetail(request)
    }

    // MARK: - Display logic
    func displayTripDetail(viewModel: ViewModel<Trip_FetchTripDetail_ViewModel>)
    {
        switch viewModel {
        case .Error(let error):
            PKHUD.sharedHUD.contentView = PKHUDTextView(text: error.localizedDescription)
            PKHUD.sharedHUD.show()
            PKHUD.sharedHUD.hide(afterDelay: 2.0)
            break

        case .Result(let result):
            let detailViewModel = result.detail;
            self.updateMapViewRegion(detailViewModel.region!)
            self.mapView.addAnnotations(detailViewModel.annotations)
            self.headView.viewModel = detailViewModel
            proxy?.datas = detailViewModel.locations
            break
        }
    }
}

// MARK: - MapView
extension TripViewController: MKMapViewDelegate {
    func setupMapView() {
        self.mapView.delegate = self
        // self.mapView.zoomEnabled = false
        self.mapView.pitchEnabled = false
    }

    func updateMapViewRegion(region: MKCoordinateRegion) {
        // let region: MKCoordinateRegion = self.mapView.regionThatFits(detailViewModel.region!)

        // FIXME: fix bug. see http://stackoverflow.com/questions/1383296/mkmapview-show-incorrectly-saved-region/1671802#1671802
        // let slightRegion = MKCoordinateRegion(center: region.center,
        // span: MKCoordinateSpan(latitudeDelta: region.span.latitudeDelta * 0.999,
        // longitudeDelta: region.span.longitudeDelta * 0.999))
        // self.mapView.setRegion(slightRegion, animated: false)
        self.mapView.setRegion(region, animated: false)
    }
    func mapView(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation) -> MKAnnotationView? {
        let identifier = NSStringFromClass(annotation.dynamicType)
        var annotationView = mapView.dequeueReusableAnnotationViewWithIdentifier(identifier) as? LocationAnnotationView
        if annotationView == nil {
            annotationView = LocationAnnotationView(annotation: annotation, reuseIdentifier: identifier)
        } else {
            annotationView?.annotation = annotation
        }
        annotationView?.update()
        return annotationView
    }
    func mapView(mapView: MKMapView, didSelectAnnotationView view: MKAnnotationView) {
    }

    func mapView(mapView: MKMapView, regionDidChangeAnimated animated: Bool) {
        XCGLogger.info("\(mapView.region)")
    }
}

// MARK: - LocationListView
extension TripViewController {
    func setupLocationListView() {
        proxy = MMArrayTableViewProxy(tableView: self.locationListView, identifier: { (tableView, indexPath) -> String in
            return "TripLocationCell"
        }, builder: { (tableView, indexPath, identifier) -> UITableViewCell? in
            return nil;
        }, modifier: { (tableView, cell, data) -> () in
            if let tripCell = cell as? TripLocationCell {
                tripCell.viewModel = data as? TripLocationCellViewModel;
            }
        }) ;
    }
}