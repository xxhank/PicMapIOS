//
//  CameraWorker.swift
//  PicMapIOS
//
//  Created by wangchaojs02 on 16/3/5.
//  Copyright (c) 2016年 wangchaojs02. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import AssetsLibrary
import Photos

import Result

class Photo {
    var identifier: String
    var asset: PHAsset?

    init(identifier: String, asset: PHAsset?) {
        self.identifier = identifier
        self.asset = asset
    }
}

class PhotoGroup {
    var date: NSDate?
    var coordinate: CLLocationCoordinate2D?
    var city: String
    var street: String
    var location: String
    var photos: [Photo]
    var identifier: String

    init(
        identifier: String,
        date: NSDate?,
        coordinate: CLLocationCoordinate2D?,
        city: String,
        street: String,
        location: String,
        photos: [Photo]) {
            self.identifier = identifier
            self.date = date
            self.coordinate = coordinate
            self.city = city
            self.street = street
            self.location = location
            self.photos = photos
        }
    func clone() -> PhotoGroup {
        return PhotoGroup(
            identifier: self.identifier,
            date: self.date,
            coordinate: self.coordinate,
            city: self.city,
            street: self.street,
            location: self.location,
            photos: self.photos)
    }
}

class LoadPhotosFromAlbumWorker
{
    var assetsLibrary = ALAssetsLibrary()
    var assertGroups: [ALAssetsGroup] = []
    // MARK: - Business Logic
    /**
     从相册中加载图片

     - Parameter completion: 加载成功之后的回调block

     - Throws:

     - Returns: call 返回如下数据结构<br>
     ```
     ["groups": [
     >>>>{date:NSData
     >>>>coordinate:CLLocationCoordinate2D
     >>>>city:String
     >>>>street:String
     >>>>locationString
     >>>>photos:[{"asset": PHAsset}]}
     ]]
     ```
     */
    func loadPhotosFromAlbum(completion: (result: Result < [String: [PhotoGroup]], NSError >) -> Void)
    {
        var groups: [PhotoGroup] = []

        let result = PHAssetCollection.fetchAssetCollectionsWithType(.Moment, subtype: .Any, options: nil)
        result.enumerateObjectsUsingBlock { (collection, index, stop) -> Void in
            if collection.estimatedAssetCount == 0 {
                return
            }

            var photos: [Photo] = []
            PHAsset.fetchAssetsInAssetCollection(collection as! PHAssetCollection, options: nil)
                .enumerateObjectsUsingBlock { (asset, index, stop) -> Void in
                    let photo = Photo(identifier: asset.localIdentifier, asset: asset as? PHAsset)
                    photos.append(photo)
                }
            let locationNames = collection.localizedLocationNames
            let locationName = locationNames.count > 0 ? locationNames[0] : "Unknown"

            var coordinate: CLLocationCoordinate2D?
            let locationOption = collection.approximateLocation
            if let location = locationOption as CLLocation! {
                coordinate = location.coordinate
            }

            var date = collection.startDate
            if date == nil {
                date = collection.endDate
            }
            let group = PhotoGroup(
                identifier: collection.localIdentifier,
                date: date!!,
                coordinate: coordinate,
                city: "Unknown",
                street: "Unknown",
                location: locationName,
                photos: photos)
            groups.append(group)
        }

        completion(result: Result(value: ["groups": groups]))
    }
}
