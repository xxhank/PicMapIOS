//
//  CameraWorker.swift
//  PicMapIOS
//
//  Created by wangchaojs02 on 16/3/5.
//  Copyright (c) 2016å¹´ wangchaojs02. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import AssetsLibrary
import Photos

import Result

class LoadPhotosFromAlbumWorker
{
    var assetsLibrary = ALAssetsLibrary()
    var assertGroups: [ALAssetsGroup] = []
    // MARK: - Business Logic
    func loadPhotosFromAlbum(completion: (result: Result < [String: Any], NSError >) -> Void)
    {
        var groups: [[String: Any]] = []

        let result = PHAssetCollection.fetchAssetCollectionsWithType(.Moment, subtype: .Any, options: nil)
        result.enumerateObjectsUsingBlock { (collection, index, stop) -> Void in
            PMILogInfo("\(collection.startDate)")
            PMILogInfo("\(collection.localizedLocationNames)")
            PMILogInfo("\(collection.approximateLocation)")
            PMILogInfo("\(collection.estimatedAssetCount)")

            if collection.estimatedAssetCount == 0 {
                return
            }
            var group: [String: Any] = [
                "date": collection.startDate,
                "coordinate": collection.approximateLocation,
                "city": "", "street": "", "location": "",
                "photos": [[String: Any]]()]

            groups.append(group)

            var photos: [[String: Any]] = group["photos"] as! [[String: Any]]
            PHAsset.fetchAssetsInAssetCollection(collection as! PHAssetCollection, options: nil)
                .enumerateObjectsUsingBlock { (asset, index, stop) -> Void in
                    let photo: [String: Any] = ["asset": asset]
                    photos.append(photo)
                }
        }

        completion(result: Result(value: ["groups": groups]))
//        var errors: [NSError] = []
//
//        assetsLibrary.enumerateGroupsWithTypes(ALAssetsGroupSavedPhotos, usingBlock: { (group: ALAssetsGroup!, stop) -> Void in
//            self.assertGroups.append(group)
//
//            let ALAssetsGroupPropertyName: String
//            let ALAssetsGroupPropertyType: String
//            let ALAssetsGroupPropertyPersistentID: String
//            let ALAssetsGroupPropertyURL: String
//
//group.valueForProperty( )
//            group.enumerateAssetsUsingBlock({ (asset, index, stop) -> Void in
//            })
//        }) { (error) -> Void in
//            errors.append(error)
//        }
//
//        if errors.count > 0 {
//            completion(result: Result(error: errors[0]))
//        } else {
//            completion(result: Result(value: assertGroups))
//        }
    }
}
