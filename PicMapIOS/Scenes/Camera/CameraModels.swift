//
//  CameraModels.swift
//  PicMapIOS
//
//  Created by wangchaojs02 on 16/3/5.
//  Copyright (c) 2016å¹´ wangchaojs02. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import Photos
import ReactiveCocoa

struct Camera_LoadPhotosFromAlbum_Request {
}

struct Camera_LoadPhotosFromAlbum_Response {
    var photos: [String : [PhotoGroup]]
}

struct PhotosFromAlbumViewModel {
    var sections: [PhotosFromAlbumSectionViewModel]!
    var photoViewModels: [[PhotosFromAlbumPhotoViewModel]]!

    static func viewModelFromDictonary(dictonary: [String: [PhotoGroup]]) -> PhotosFromAlbumViewModel? {
        let groups = dictonary["groups"]!
        var sections = [PhotosFromAlbumSectionViewModel]()
        var photoViewModelsArray = [[PhotosFromAlbumPhotoViewModel]]()
        for group in groups {
            let city = group.city // ["city"] as! String
            let street = group.street // ["street"] as! String
            let location = group.location // ["location"] as! String
            let date = group.date // ["date"] as? NSDate

            var dateString = ""
            if date != nil {
                let dateFormatter = NSDateFormatter()
                dateFormatter.dateFormat = "YYYY-MM-DD"
                dateString = dateFormatter.stringFromDate(date!)
            }

            var photoViewModels = [PhotosFromAlbumPhotoViewModel]()
            let photos = group.photos // ["photos"] as! [[String: AnyObject]]
            for photo in photos {
                photoViewModels.append(PhotosFromAlbumPhotoViewModel(photoData: photo))
            }
            let sectionViewModel = PhotosFromAlbumSectionViewModel(
                location: location,
                street: street,
                city: city,
                date: dateString,
                photos: photoViewModels)
            photoViewModelsArray.append(photoViewModels)
            sections.append(sectionViewModel)
        }
        return PhotosFromAlbumViewModel(sections: sections, photoViewModels: photoViewModelsArray)
    }
}

class PhotosFromAlbumSectionViewModel {
    var location: String!
    var street: String!
    var city: String!
    var date: String!
    var photos: [PhotosFromAlbumPhotoViewModel]!

    init(location: String, street: String, city: String, date: String, photos: [PhotosFromAlbumPhotoViewModel]) {
        self.location = location
        self.street = street
        self.city = city
        self.date = date
        self.photos = photos
    }
}

class PhotoLoader {
    class var sharedLoader: PhotoLoader {
        struct Static {
            static var onceToken: dispatch_once_t = 0
            static var instance: PhotoLoader? = nil
        }
        dispatch_once(&Static.onceToken) {
            Static.instance = PhotoLoader()
        }
        return Static.instance!
    }

    var imageManager = PHCachingImageManager()

    func loadImage(asset: PHAsset, cellSize: CGSize, completion: (image: UIImage?) -> Void) {

        let scale = UIScreen.mainScreen().scale;
        let AssetGridThumbnailSize = CGSize(width: cellSize.width * scale, height: cellSize.height * scale)

        self.imageManager.requestImageForAsset(asset, targetSize: AssetGridThumbnailSize, contentMode: .AspectFill, options: nil) { (image, info) -> Void in
            completion(image: image)
        }
    }
}

class PhotosFromAlbumPhotoViewModel {
    var photoData: Photo!
    var selected = MutableProperty<Bool>(false)

    init(photoData: Photo) {
        self.photoData = photoData
    }

    func loadImage(cellSize: CGSize, completion: (image: UIImage?) -> Void) {
        if let asset = photoData.asset {
            PhotoLoader.sharedLoader.loadImage(asset, cellSize: cellSize, completion: completion)
        } else {
            completion(image: nil)
        }
    }
}