//
//  CameraInteractor.swift
//  PicMapIOS
//
//  Created by wangchaojs02 on 16/3/5.
//  Copyright (c) 2016å¹´ wangchaojs02. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

let CameraInteractorErrorDomain = "CameraInteractor"
enum CameraInteractorError: ErrorType {
    case General
}

protocol CameraInteractorOutput
{
    func presentPhotosFromAlbum(response: Response<Camera_LoadPhotosFromAlbum_Response>)
}

class CameraInteractor: CameraInteractorInput
{
    var output: CameraInteractorOutput!
    var worker: LoadPhotosFromAlbumWorker!

    // MARK: - Business logic
    // func doSomething(request: CameraRequest)
    // {
    // NOTE: Create some Worker to do the work

    // worker = CameraWorker()
    // worker.doSomeWork()

    // NOTE: Pass the result to the Presenter

    // let response = CameraResponse()
    // output.presentSomething(response)
//        PMIAPI.fetchJSON("<#action#>", parameters: [:])
//            .success { (responseData) -> Void in
//                if let responseData = responseData as? [String: AnyObject] {
//                    let response = <#Response#>(detail: responseData)
//                    self.output.<#present#>(Response.Result(response))
//                } else {
//                    let error = NSError(domain: CameraInteractorErrorDomain,
//                        code: CameraInteractorError.General)
//
//                    self.output.<#present#>(Response.Error(error))
//                }
//            }.failure { (error, isCancelled) -> Void in
//                if !isCancelled {
//                    self.output.<#present#>(Response.Error(error!))
//                }
//            }
    // }

    func loadPhotosFromAlbum(request: Camera_LoadPhotosFromAlbum_Request) -> () {
        if worker == nil {
            worker = LoadPhotosFromAlbumWorker()
        }
        worker.loadPhotosFromAlbum { (result) -> Void in
            switch result {
            case .Success(let result):
                let response = Camera_LoadPhotosFromAlbum_Response(photos: result)
                self.output.presentPhotosFromAlbum(Response.Result(response))
                break
            case .Failure(let error):
                self.output.presentPhotosFromAlbum(Response.Error(error))
                break
            }
        }
    }
}