//
//  PlantPresenter.swift
//  PicMapIOS
//
//  Created by wangchaojs02 on 16/1/31.
//  Copyright (c) 2016å¹´ wangchaojs02. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

//protocol PlantPresenterInput
//{
//    func presentLocationInformation(response: Response<Plant_FormatLocation_Response>)
//    func presentSightList(response: Response<Plant_FetchSightList_Response>)
//    func presentSightDetail(response: Response<Plant_FetchSightDetail_Response>)
//}

//protocol PlantPresenterOutput: class
//{
//    func displayLocationInformation(viewModel: ViewModel<LocationViewModel>)
//    func displaySightList(viewModel: ViewModel<Plant_SightList_ViewModel>)
//    func displaySightDetail(viewModel: ViewModel<Plant_TripList_ViewModel>)
//}

class PlantPresenter: PlantPresenterInput
{
    weak var output: PlantPresenterOutput!

    // MARK: Presentation logic
    func presentLocationInformation(response: Response<Plant_FormatLocation_Response>) {
        switch response {
        case .Error(let error):
            output.displayLocationInformation(ViewModel<LocationViewModel>.Error(error))
            break
        case .Result(let result):
            let viewModel = LocationViewModel(
                city: result.information["City"] as? String,
                street: result.information["Street"] as? String,
                location: result.information["SubLocality"] as? String)

            output.displayLocationInformation(ViewModel<LocationViewModel>.Result(viewModel))
        }
    }

    func presentSightList(response: Response<Plant_FetchSightList_Response>) {
        switch response {
        case .Error(let error):
            output.displaySightList(ViewModel<Plant_SightList_ViewModel>.Error(error))
            break
        case .Result(let result):
            let sightList = result.sightList.map({ (sight) -> SightViewModel in
                return SightViewModel.viewModelFromDictonary(sight)! })
            let viewModel = Plant_SightList_ViewModel(sightList: sightList)
            output.displaySightList(ViewModel<Plant_SightList_ViewModel>.Result(viewModel))
            break
        }
    }

    func presentSightDetail(response: Response<Plant_FetchSightDetail_Response>) {
        switch response {
        case .Error(let error):
            output.displaySightDetail(ViewModel<Plant_TripList_ViewModel>.Error(error))
            break
        case .Result(let result):
            let tripList = result.trips.map({ (trip) -> TripCellViewModel in
                return TripCellViewModel.viewModelFromDictonary(trip)! })
            let viewModel = Plant_TripList_ViewModel(trips: tripList)
            output.displaySightDetail(ViewModel<Plant_TripList_ViewModel>.Result(viewModel))
            break
        }
    }
}
