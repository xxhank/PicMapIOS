//
//  PlantModels.swift
//  PicMapIOS
//
//  Created by wangchaojs02 on 16/1/31.
//  Copyright (c) 2016å¹´ wangchaojs02. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CoreLocation
import MapKit
import ObjectMapper

struct PlantRequest
{
}

struct PlantResponse
{
}

struct PlantViewModel
{
}

// MARK: - FormatLocation
struct Plant_FormatLocation_Requset
{
    var location: CLLocation
}

struct Plant_FormatLocation_Response
{
    var information: [NSObject : AnyObject]
}

struct LocationViewModel
{
    var city: String?
    var street: String?
    var location: String?
}

// MARK: - FetchSightsData
struct Plant_FetchSightDetail_Request
{
    var trips: [[String: AnyObject]]
}

struct Plant_FetchSightDetail_Response
{
    var trips: [[String: AnyObject]]
}

struct Plant_TripList_ViewModel {
    var trips: [TripCellViewModel]
}

class TripViewModel: Mappable {
    var authorID: String = ""
    var author: String = ""
    var avatar: String = ""

    var tripID: String = ""
    var title: String = ""
    var brief: String = ""
    var photo: String = ""
    var days: Int16 = 0
    var heat: Int = 0

    required init?(_ map: Map) {
    }

    func mapping(map: Map) -> () {
        authorID <- map["author.aid"]
        author <- map["author.name"]
        avatar <- map["author.avatar"]

        tripID <- map["trip_id"]
        title <- map["title"]
        brief <- map["brief"]
        photo <- map["head_photo"]
        days <- map["days"]
        heat <- map["heat"]
    }
}

class TripCellViewModel: TripViewModel {

    var locations: [String] = []

    class func viewModelFromDictonary(dictonary: [String: AnyObject]) -> TripCellViewModel? {
        return Mapper<TripCellViewModel>().map(dictonary)
    }

    override func mapping(map: Map) -> () {
        super.mapping(map)
        locations <- map["locations"]
    }
}

// MARK: - FetchSightsData
struct Plant_FetchSightList_Request
{
    var region: MKCoordinateRegion;
}

struct Plant_FetchSightList_Response
{
    var sightList: [[String: AnyObject]]
}

struct Plant_SightList_ViewModel
{
    var sightList: [SightViewModel]
}

class SightViewModel: Mappable {
    var coordinate: CLLocationCoordinate2D?
    var thumbnail: String?
    var imageCount: UInt = 0
    var trips: [[String: AnyObject]] = []

    class func viewModelFromDictonary(dictonary: [String: AnyObject]) -> SightViewModel? {
        return Mapper<SightViewModel>().map(dictonary)
    }

    required init?(_ map: Map) {
    }

    func mapping(map: Map) -> () {
        typealias CoordinateDictionary = [String: AnyObject]

        let transform = TransformOf < CLLocationCoordinate2D, CoordinateDictionary >(fromJSON: { (dictionary) -> CLLocationCoordinate2D? in
            if let dictionary = dictionary,
                let latitude = dictionary["lat"] as! Double?,
                let longitude = dictionary["lng"] as! Double? {
                    return CLLocationCoordinate2DMake(latitude, longitude)
                }
            return nil
        }, toJSON: { (coordinate) -> CoordinateDictionary? in
            if let coordinate = coordinate {
                return ["lat" : "\(coordinate.latitude)",
                    "lng": "\(coordinate.longitude)"]
            }
            return nil
        })

        coordinate <- (map["coordinate"], transform)
        thumbnail <- map["photo"]
        imageCount <- map["count"]
        trips <- map["trips"]
    }
}
